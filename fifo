// Code your design here
module fifo(clk,rst,wr_en,rd_en,datain,dataout,full,empty);
  
  input clk, rst, wr_en, rd_en;
  input [7:0] datain;
  output reg [7:0] dataout;
  
  output reg full;
  output reg empty;
  reg [7:0] memo [7:0];  //8bits each, 8 such locations
  
  reg [3:0] rdptr;    //internal pointers for addressing 8 locations and also 
  reg [3:0] wrptr;    // for indicator flags purpose
  
  //assign full = (wrptr << rdptr) ? 1:0;  //it cannot be here as full and empty cannot have continous assignment so had to put in always block
  //assign empty = (wrptr == rdptr) ? 1:0;
  
  
  always @ (posedge clk) begin
    
    if(!rst) begin
      
      dataout <= 8'd0;
      memo[0] <= 8'b00000000;
      memo[1] <= 8'b00000000;
      memo[2] <= 8'b00000000;
      memo[3] <= 8'b00000000;
      memo[4] <= 8'b00000000;
      memo[5] <= 8'b00000000;
      memo[6] <= 8'b00000000;
      memo[7] <= 8'b00000000;
      rdptr <= 3'b000;
      wrptr <= 3'b000;
      full <= 0;
      empty <= 0;
      
    end
    
    //write
    else if (wr_en == 1 && !full) begin //means i want to write and there's empty space in fifo
      wrptr <= wrptr + 3'b001;
      memo[wrptr] <= datain;	
    end
    
    //read
    else if (rd_en == 1 && !empty) begin //means i want to read and fifo is not empty, so can readd data
       rdptr <= rdptr + 3'b001;
       dataout <= memo[rdptr];
    end
    
    full <= (wrptr << rdptr) ? 1:0;
    empty <= (wrptr == rdptr) ? 1:0;
    
  end
endmodule
   
