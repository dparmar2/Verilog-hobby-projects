//By Divyesh Mahesh Parmar
module MUX8_4b_GL
   (
     input  wire [3:0] A0,
     input  wire [3:0] A1,
     input  wire [3:0] A2,
     input  wire [3:0] A3,
     input  wire [3:0] A4,
     input  wire [3:0] A5,
     input  wire [3:0] A6,
     input  wire [3:0] A7,
     input  wire [2:0] S,
     output wire [3:0] Y  );
  
 // wire s2 = S[2]; wire s1 = S[1] ;wire s0 = S[0] //Select inputs 
    wire s2b, s1b, s0b;                    //~Select inputs
    wire a00_out,a01_out,a02_out,a03_out;  //A0 all out
    wire a10_out,a11_out,a12_out,a13_out;  //A1 all out
    wire a20_out,a21_out,a22_out,a23_out;  //A2 all out
    wire a30_out,a31_out,a32_out,a33_out;  //A3 all out
    wire a40_out,a41_out,a42_out,a43_out;  //A4 all out
    wire a50_out,a51_out,a52_out,a53_out;  //A5 all out
    wire a60_out,a61_out,a62_out,a63_out;  //A6 all out
    wire a70_out,a71_out,a72_out,a73_out;  //A7 all out
  
  	
  
  INV_GT inv1g1 (s0b,S[0]);
  INV_GT inv2g2 (s1b,S[1]);
  INV_GT inv3g3 (s2b,S[2]);
  
  //for A0
  processing proc01 (a00_out,A0[0],s0b,s1b,s2b);
  processing proc02 (a01_out,A0[1],s0b,s1b,s2b);
  processing proc03 (a02_out,A0[2],s0b,s1b,s2b);
  processing proc04 (a03_out,A0[3],s0b,s1b,s2b);
  
  //for A1
  processing proc11 (a10_out,A1[0],s2b,s1b,S[0]);
  processing proc12 (a11_out,A1[1],s2b,s1b,S[0]);
  processing proc13 (a12_out,A1[2],s2b,s1b,S[0]);
  processing proc14 (a13_out,A1[3],s2b,s1b,S[0]);
  
  //for A2
  processing proc21 (a20_out,A2[0],s2b,S[1],s0b);
  processing proc22 (a21_out,A2[1],s2b,S[1],s0b);
  processing proc23 (a22_out,A2[2],s2b,S[1],s0b);
  processing proc24 (a23_out,A2[3],s2b,S[1],s0b);
  
  //for A3
  processing proc31 (a30_out,A3[0],s2b,S[1],S[0]);
  processing proc32 (a31_out,A3[1],s2b,S[1],S[0]);
  processing proc33 (a32_out,A3[2],s2b,S[1],S[0]);
  processing proc34 (a33_out,A3[3],s2b,S[1],S[0]);
  
  //for first A4
  processing proc41 (a40_out,A4[0],S[2],s1b,s0b);
  processing proc42 (a41_out,A4[1],S[2],s1b,s0b);
  processing proc43 (a42_out,A4[2],S[2],s1b,s0b);
  processing proc44 (a43_out,A4[3],S[2],s1b,s0b);
  
  //for A5
  processing proc51 (a50_out,A5[0],S[2],s1b,S[0]);
  processing proc52 (a51_out,A5[1],S[2],s1b,S[0]);
  processing proc53 (a52_out,A5[2],S[2],s1b,S[0]);
  processing proc54 (a53_out,A5[3],S[2],s1b,S[0]);
  
  //for A6
  processing proc61 (a60_out,A6[0],S[2],S[1],s0b);
  processing proc62 (a61_out,A6[1],S[2],S[1],s0b);
  processing proc63 (a62_out,A6[2],S[2],S[1],s0b);
  processing proc64 (a63_out,A6[3],S[2],S[1],s0b);
  
  //for A7
  processing proc71 (a70_out,A7[0],S[2],S[1],S[0]); 
  processing proc72 (a71_out,A7[1],S[2],S[1],S[0]);
  processing proc73 (a72_out,A7[2],S[2],S[1],S[0]);
  processing proc74 (a73_out,A7[3],S[2],S[1],S[0]);
  
  //for 0th bit
  ored_op oplog0 (Y[0],a00_out,a10_out,a20_out,a30_out,a40_out,a50_out,a60_out,a70_out);
  //for 1st bit
  ored_op oplog1 (Y[1],a01_out,a11_out,a21_out,a31_out,a41_out,a51_out,a61_out,a71_out);
  //for 2nd bit
  ored_op oplog2 (Y[2],a02_out,a12_out,a22_out,a32_out,a42_out,a52_out,a62_out,a72_out);
  //for 3rd bit
  ored_op oplog3 (Y[3],a03_out,a13_out,a23_out,a33_out,a43_out,a53_out,a63_out,a73_out);
  
endmodule
  

module processing(pro_out,w,x,y,z);
  //input is select signal of 3 bits to w,x,y and our bit input An[0].
  //output pro_out goes to the or gate for final stage.  
  input w,x,y,z;
  output pro_out;
  wire pe1, pe2;
  
  and1 an1(pe1,w,x);
  and1 an2(pe2,y,z);
  and1 an3(pro_out,pe1,pe2);
  
endmodule

module and1(D1,A1,B1);
  output D1;
  input A1,B1;
  
  wire C1;
  
  NAND2_GT i11lol(C1,A1,B1);
  INV_GT i1lolol(D1,C1);  
  
endmodule

//for processing all ouputs of processing element to final Y[0]
module ored_op(or_logic_op,g,h,i,j,k,l,m,n);
  input g,h,i,j,k,l,m,n;
  output or_logic_op;
  
  wire orlog1,orlog2,orlog3,orlog4,orlog5,orlog6;
  
  or1 lolol1(orlog1,g,h);
  or1 lolol2(orlog2,i,j);
  or1 lolol3(orlog3,k,l);
  or1 lolol4(orlog4,m,n);
  or1 lolol5(orlog5,orlog1,orlog2);
  or1 lolol6(orlog6,orlog3,orlog4);
  or1 lolol7(or_logic_op,orlog5,orlog6);
  
endmodule

module or1(H1,E1,F1);
  output H1;
  input E1,F1;
  
  wire G1;
  
  NOR2_GT i22lol(G1,E1,F1);
  INV_GT i2lolol(H1,G1);
  
endmodule
        
/////////////////////////////////////////////
//
// Models for generic gates
//
/////////////////////////////////////////////

module FA_GT ( CO, S, A, B, CI );
   output CO, S;
   input  A, B, CI;

   wire   n0;
   wire   n1;
   wire   n2;
   
   xor #(12) xor00( S, A, B, CI);

   and I0(n0,  A,  B);   
   and I1(n1,  B, CI);
   and I2(n2, CI,  A);
   
   nor #(10) I3(CO, n0, n1, n2);
   
endmodule

module INV_GT
  (
   Y, A
   );
   output Y;
   input  A;
   
   not #(4) I0(Y,A);
   
endmodule

module TRI_GT
  (
   Y, A, E, Eb
   );
  output Y;
  input E;
  input Eb;
  input A;
   
  notif0 #(6) (Y, A, Eb);
  notif1 #(6) (Y, A,  E);
 
endmodule

module NAND2_GT
  (
   Y, A, B
   );
   output Y;
   input  A;
   input  B;
   
   nand #(4) (Y, A, B);
endmodule

module NOR2_GT
  (
   Y, A, B
   );
   output Y;
   input  A;
   input  B;

   nor #(4) (Y, A, B);
endmodule

module AOI21_GT
  (
   Y, A0, A1, B0
   );

   output Y;
   input  A0;
   input  A1;
   input  B0;
   wire   outA ;

   and I0(outA, A0, A1);
   nor #(8) I1(Y, B0, outA);

endmodule

module AOI22_GT
  (
   Y, A0, A1, B0, B1
   );

   output Y;
   input  A0;
   input  A1;
   input  B0;
   input  B1;

   wire   outA ;
   wire   outB ;


   and I0(outA, A0, A1);
   and I1(outB, B0, B1);
   nor #(8) I2(Y, outA, outB);

endmodule

module OAI21_GT
  (
   Y, A0, A1, B0
   );

   output Y;
   input  A0;
   input  A1;
   input  B0;
   wire   outA ;

   or I0(outA, A0, A1);
   nand #(7) I1(Y, B0, outA);

endmodule

module OAI22_GT
  (
   Y, A0, A1, B0, B1
   );

   output Y;
   input  A0;
   input  A1;
   input  B0;
   input  B1;

   wire   outA ;
   wire   outB ;


   or I0(outA, A0, A1);
   or I1(outB, B0, B1);
   nand #(8) I2(Y, outA, outB);

endmodule

module XOR2_GT
  (
   Y, A, B
   );
   
  output Y;
  input  A;
  input  B;

  xor #(12) I5(Y, A, B);

endmodule
